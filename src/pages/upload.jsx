// src/pages/Upload.jsx
import React from "react";
import { useNavigate } from "react-router-dom";
import FrontSidebar from "../components/Sidebar";
import FrontNavbar from "../components/Topbar";
import "./Upload.css";

import { createProgramme, uploadProgrammeFile } from "../services/api";

const CATEGORY_OPTIONS = [
  { value: "news", label: "‡∏Ç‡πà‡∏≤‡∏ß" },
  { value: "variety", label: "‡∏ß‡∏≤‡πÑ‡∏£‡∏ï‡∏µ‡πâ" },
  { value: "singing", label: "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á" },
];

export default function UploadPage() {
  const now = new Date();
  const dateStr = now.toLocaleDateString("th-TH", {
    weekday: "long", day: "numeric", month: "long", year: "numeric",
  });
  const timeStr = now.toLocaleTimeString("th-TH", {
    hour: "2-digit", minute: "2-digit", second: "2-digit",
  });

  const [sidebarCollapsed, setSidebarCollapsed] = React.useState(false);

  // ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ü‡∏≠‡∏£‡πå‡∏° (‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå DB)
  const [title, setTitle] = React.useState("‡∏ô‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≥‡πÅ‡∏û‡∏á");
  const [shootDate, setShootDate] = React.useState(() => {
    const tz = now.getTimezoneOffset() * 60 * 1000;
    return new Date(now.getTime() - tz).toISOString().slice(0, 10); // YYYY-MM-DD
  });
  const [startTime, setStartTime] = React.useState("12:00"); // TIME (HH:MM)
  const [endTime, setEndTime] = React.useState("15:00");     // TIME (HH:MM)
  const [details, setDetails] = React.useState("schedule");

  // ‚úÖ NEW: ‡∏ú‡∏π‡∏Å select ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ß‡∏≤‡πÑ‡∏£‡∏ï‡∏µ‡πâ)
  const [category, setCategory] = React.useState("variety");

  // ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î (program_uploads)
  const [file, setFile] = React.useState(null);
  const [previewImage, setPreviewImage] = React.useState(null);

  const [uploadSuccess, setUploadSuccess] = React.useState(false);
  const [submitting, setSubmitting] = React.useState(false);
  const fileInputRef = React.useRef(null);
  const navigate = useNavigate();

  const handleFilePick = () => fileInputRef.current?.click();

  const handleFileChange = (e) => {
    const f = e.target.files?.[0] || null;
    setFile(f);
    if (f && f.type.startsWith("image/")) {
      const reader = new FileReader();
      reader.onload = (ev) => setPreviewImage(ev.target.result);
      reader.readAsDataURL(f);
    } else {
      setPreviewImage(null);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!title.trim()) return alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£");
    if (!file) return alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î");

    const hhmm = /^\d{2}:\d{2}$/;
    if (!hhmm.test(startTime) || !hhmm.test(endTime)) {
      return alert("‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM)");
    }
    if (shootDate && !/^\d{4}-\d{2}-\d{2}$/.test(shootDate)) {
      return alert("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡∏ó‡∏≥‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD)");
    }
    const toMin = (t) => {
      const [h, m] = t.split(":").map(Number);
      return h * 60 + m;
    };
    if (toMin(endTime) <= toMin(startTime)) {
      return alert("‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô");
    }

    try {
      setSubmitting(true);
      const description = (details || "").trim();

      // ‚úÖ NEW: ‡∏™‡πà‡∏á category ‡πÑ‡∏õ‡∏ó‡∏µ‡πà backend (map -> programmes.category)
      const programme = await createProgramme({
        title: title.trim(),
        description,
        shoot_date: shootDate,
        start_time: startTime,
        end_time: endTime,
        category, // üëà ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ select
      });

      await uploadProgrammeFile({
        programme_id: programme.id,
        file
      });

      setUploadSuccess(true);
      setTimeout(() => {
        setUploadSuccess(false);
        navigate("/");
      }, 1200);

    } catch (err) {
      console.error("[Upload] submit error:", err);
      alert(err?.message || "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } finally {
      setSubmitting(false);
    }
  };


  return (
    <div style={{ display: "flex", minHeight: "100vh", background: "#f5f7fa" }}>
      <FrontSidebar
        collapsed={sidebarCollapsed}
        onToggleCollapse={() => setSidebarCollapsed(!sidebarCollapsed)}
      />
      <div style={{ flex: 1, display: "flex", flexDirection: "column" }}>
        <FrontNavbar dateStr={dateStr} timeStr={timeStr} />

        <div className="upload-container" style={{ maxWidth: "none", width: "100%", padding: "40px 32px" }}>
          <h2 className="title" style={{ marginBottom: 40 }}>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</h2>

          {uploadSuccess && (
            <div style={{
              background: "#d4edda", color: "#155724", border: "1px solid #c3e6cb",
              borderRadius: 6, padding: "12px 20px", marginBottom: 20,
              fontWeight: "bold", fontSize: 16, textAlign: "center"
            }}>
              ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
            </div>
          )}

          <form onSubmit={handleSubmit}>
            <div className="content" style={{ gap: 40 }}>
              {/* ‡∏ù‡∏±‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢: ‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå */}
              <div className="left-panel" style={{ width: 320 }}>
                <div
                  className="video-box"
                  style={{
                    height: 220, cursor: "pointer", position: "relative", overflow: "hidden",
                    border: "2px dashed #a7a6a6ff", background: "#efefefff",
                    display: "flex", alignItems: "center", justifyContent: "center"
                  }}
                  onClick={handleFilePick}
                  title="‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå"
                >
                  {previewImage ? (
                    <img
                      src={previewImage}
                      alt="preview"
                      style={{ width: "100%", height: "100%", objectFit: "cover", display: "block" }}
                    />
                  ) : (
                    <div style={{ textAlign: "center", color: "#666" }}>
                      <div style={{ fontSize: 32, marginBottom: 6 }}>+</div>
                      <div style={{ fontSize: 13 }}>
                        {file ? file.name : "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå (‡∏£‡∏π‡∏õ/‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠/‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£)"}
                      </div>
                    </div>
                  )}
                  <input
                    type="file"
                    ref={fileInputRef}
                    style={{ display: "none" }}
                    accept="*/*"
                    onChange={handleFileChange}
                  />
                </div>

                <button className="menu-btn" type="button">‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡∏π‡∏î‡∏¥‡πÇ‡∏≠</button>
                <button className="menu-btn" type="button">‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÑ‡∏ü</button>
                <button className="menu-btn" type="button">‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏ß‡∏ï</button>
              </div>

              {/* ‡∏ù‡∏±‡πà‡∏á‡∏Ç‡∏ß‡∏≤: ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ */}
              <div className="right-panel" style={{ flex: 1 }}>
                <div className="form-group">
                  <label>‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</label>
                  <div className="input-with-icon">
                    <input
                      type="text"
                      value={title}
                      onChange={(e) => setTitle(e.target.value)}
                      placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≥‡πÅ‡∏û‡∏á"
                      required
                    />
                    <button className="edit-btn-upload" type="button">‚úé</button>
                  </div>

                  {/* ‚úÖ ‡πÄ‡∏°‡∏ô‡∏π Select ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó */}
                  <div className="form-group">
                    <label>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</label>
                    <div className="category-options">
                      <button
                        type="button"
                        className={`category-btn ${category === "news" ? "active" : ""}`}
                        onClick={() => setCategory("news")}
                      >
                        ‡∏Ç‡πà‡∏≤‡∏ß
                      </button>
                      <button
                        type="button"
                        className={`category-btn ${category === "variety" ? "active" : ""}`}
                        onClick={() => setCategory("variety")}
                      >
                        ‡∏ß‡∏≤‡πÑ‡∏£‡∏ï‡∏µ‡πâ
                      </button>
                      <button
                        type="button"
                        className={`category-btn ${category === "singing" ? "active" : ""}`}
                        onClick={() => setCategory("singing")}
                      >
                        ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á
                      </button>
                    </div>
                  </div>
                </div>

                <div className="form-row">
                  <div className="form-group" style={{ flex: 1 }}>
                    <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡∏ó‡∏≥</label>
                    <input
                      type="date"
                      value={shootDate}
                      onChange={(e) => setShootDate(e.target.value)}
                    />
                  </div>
                  <div className="form-group" style={{ flex: 1 }}>
                    <label>‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡∏ó‡∏≥</label>
                    <div style={{ display: "flex", gap: 8 }}>
                      <input
                        type="time"
                        value={startTime}
                        onChange={(e) => setStartTime(e.target.value)}
                        style={{ flex: 1 }}
                      />
                      <span style={{ alignSelf: "center" }}>‡∏ñ‡∏∂‡∏á</span>
                      <input
                        type="time"
                        value={endTime}
                        onChange={(e) => setEndTime(e.target.value)}
                        style={{ flex: 1 }}
                      />
                    </div>
                  </div>
                </div>

                <div className="form-group">
                  <label>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏ó‡∏≥</label>
                  <textarea
                    value={details}
                    onChange={(e) => setDetails(e.target.value)}
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå/‡∏Ñ‡∏¥‡∏ß‡∏Å‡∏•‡πâ‡∏≠‡∏á/‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"
                  />
                </div>

                <button
                  className="submit-btn"
                  style={{ width: "100%", marginTop: 20 }}
                  disabled={submitting}
                >
                  {submitting ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î..." : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î"}
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}
